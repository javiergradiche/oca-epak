{
  "name": "OCA e-Pak Ruby Gem",
  "tagline": "Ruby Wrapper for the OCA e-Pak API",
  "body": "# OCA e-Pak\r\n\r\nA Ruby Wrapper for the OCA e-Pak API\r\n\r\n[![Gem Version](https://badge.fury.io/rb/oca-epak.svg)](http://badge.fury.io/rb/oca-epak)\r\n[![Build Status](https://travis-ci.org/ombulabs/oca-epak.svg?branch=master)](https://travis-ci.org/ombulabs/oca-epak)\r\n[![Code Climate](https://codeclimate.com/github/ombulabs/oca-epak/badges/gpa.svg)](https://codeclimate.com/github/ombulabs/oca-epak)\r\n\r\n## Getting Started\r\n\r\nFor command line usage:\r\n\r\n```bash\r\n$ gem install oca-epak\r\n```\r\n\r\nIf you intend to use it within an application, add `gem \"oca-epak\"` to your\r\n`Gemfile`.\r\n\r\n## Usage\r\n\r\nThere are two OCA clients available, one for each endpoint. `Oca::Epak::Client`\r\nprovides most of OCA's Epak offerings. The other one, which uses an older\r\nendpoint, `Oca::Oep::Client`, provides only a few methods which aren't yet\r\navailable under the new endpoint.\r\n\r\nYou will most likely want to use `Oca::Epak::Client` most of the time. To\r\ninitialize a client:\r\n\r\n```ruby\r\nepak_client = Oca::Epak::Client.new(\"your-email@example.com\", \"your-password\")\r\n```\r\n\r\nTo check whether your credentials are valid or not, run `#check_credentials`\r\n\r\n```ruby\r\nepak_client.check_credentials\r\n=> true\r\n```\r\n\r\nTo see your available operation codes, you can use `#get_operation_codes`\r\n\r\n```ruby\r\noperation_codes = epak_client.get_operation_codes\r\n=> [{ :id_operativa=>\"77790\",\r\n      :descripcion=>\"77790 - ENVIOS DE PUERTA A PUERTA\",\r\n      :con_volumen=>false,\r\n      :con_valor_declarado=>false,\r\n      :a_sucursal=>false,\r\n      :\"@diffgr:id\"=>\"Table1\",\r\n      :\"@msdata:row_order\"=>\"0\" }]\r\n```\r\n\r\nNOTE: Keep in mind that you cannot register/create an operation code via OCA's\r\nAPI, you have to get in touch with someone from OCA and they take care of the\r\nregistration.\r\n\r\nAfter you have your operation code active for a given delivery type, you can\r\nbegin calculating shipping rates and delivery estimates:\r\n\r\n```ruby\r\nopts = { total_weight: \"50\", total_volume: \"0.027\", origin_zip_code: \"1646\",\r\n         destination_zip_code: \"2000\", declared_value: \"100\",\r\n         package_quantity: \"1\", cuit: \"30-99999999-7\", operation_code: \"77790\" }\r\n\r\nepak_client.get_shipping_rate(opts)\r\n=> {:tarifador=>\"15\",\r\n    :precio=>\"328.9000\",\r\n    :id_tiposervicio=>\"2\",\r\n    :ambito=>\"Regional\",\r\n    :plazo_entrega=>\"3\",\r\n    :adicional=>\"0.0000\",\r\n    :total=>\"328.9000\",\r\n    :xml=>\"<row Tarifador=\\\"15\\\" Precio=\\\"328.9000\\\"/>\",\r\n    :\"@diffgr:id\"=>\"Table1\",\r\n    :\"@msdata:row_order\"=>\"0\"}\r\n```\r\n\r\nTo create a pickup order, in order to let OCA know that they should pick up an\r\norder for delivery, you can use `#create_pickup_order`.\r\n\r\nYou will first need to create an `Oca::Epak::PickupData` object.\r\nThe pickup hash contains information about the sender of the package, where OCA\r\nshould pick it up. The shipments hash contains information about who will\r\nreceive the package, where it should be sent:\r\n\r\n```ruby\r\nopts = {\r\n  account_number: \"your-account-number-aka-sap\",\r\n  pickup: { \"calle\" => \"street-name\",\r\n            \"numero\" => \"street-number\",\r\n            \"piso\" => \"\",\r\n            \"departamento\" => \"\",\r\n            \"cp\" => \"zipcode\",\r\n            \"localidad\" => \"city\",\r\n            \"provincia\" => \"province\",\r\n            \"solicitante\" => \"your-name\",\r\n            \"email\" => \"your-email\",\r\n            \"observaciones\"=> \"\" },\r\n  shipments: [\r\n    {\r\n      \"id_operativa\" => \"operation-code\",\r\n      \"numero_remito\" => \"your-internal-order-number\",\r\n      \"destinatario\" => {\r\n        \"apellido\" => \"last-name\",\r\n        \"nombre\" => \"first-name\",\r\n        \"calle\" => \"street-name\",\r\n        \"numero\" => \"street-number\",\r\n        \"piso\" => \"\",\r\n        \"departamento\" => \"\",\r\n        \"cp\" => \"zipcode\",\r\n        \"localidad\" => \"city\",\r\n        \"provincia\" => \"provice\",\r\n        \"telefono\" => \"phone\",\r\n        \"email\" => \"email\"\r\n      },\r\n      \"paquetes\"=> [\r\n        {\r\n          \"alto\" => \"package-height-in-m\",\r\n          \"ancho\" => \"package-width-in-m\",\r\n          \"largo\" => \"package-depth-in-m\",\r\n          \"peso\" => \"package-weight-in-kg\",\r\n          \"valor_declarado\" => \"package-monetary-value\",\r\n          \"cantidad\" => \"quantity-of-packages\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}\r\n\r\npickup_data = Oca::Epak::PickupData.new(opts)\r\n```\r\n\r\nAfter you create the `PickupData` object, you can submit the shipment:\r\n\r\n```ruby\r\nresponse = epak_client.create_pickup_order(pickup_data)\r\nresponse[:diffgram]\r\n=> {:resultado=>\r\n    {:resumen=>\r\n      {:codigo_operacion=>\"13150502\",\r\n       :fecha_ingreso=>#<DateTime: 2015-11-17T11:43:50-03:00 ((2457344j,53030s,607000000n),-10800s,2299161j)>,\r\n       :mail_usuario=>\"hola@ombushop.com\",\r\n       :cantidad_registros=>\"1\",\r\n       :cantidad_ingresados=>\"1\",\r\n       :cantidad_rechazados=>\"0\",\r\n       :\"@diffgr:id\"=>\"Resumen1\",\r\n       :\"@msdata:row_order\"=>\"0\"}\r\n     }\r\n   }\r\n```\r\n\r\n`#create_pickup_order` has a few extra options you can check by browsing the\r\n[method's documentation](http://www.rubydoc.info/github/ombulabs/oca-epak/master/Oca%2FEpak%2FClient%3Acreate_pickup_order).\r\n\r\n## Contributing & Development\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Write your feature (and tests)\r\n4. Run tests (`bundle exec rake`)\r\n5. Commit your changes (`git commit -am 'Added some feature'`)\r\n6. Push to the branch (`git push origin my-new-feature`)\r\n7. Create new Pull Request\r\n\r\n## Release the Gem\r\n\r\n```bash\r\n$ bundle exec rake release\r\n```\r\n\r\n## License\r\n\r\nThe gem is available as open source under the terms of the [MIT License](http://opensource.org/licenses/MIT).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}